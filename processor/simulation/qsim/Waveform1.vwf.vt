// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2018 16:58:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [8:0] DataAndInstructionInput;
reg Run;
reg [8:0] a;
reg [8:0] b;
reg clock;
reg resetn;
reg [2:0] selectionMuxInput;
reg [2:0] writeInRegister;
// wires                                               
wire [8:0] BusWires;
wire Done;

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.BusWires(BusWires),
	.DataAndInstructionInput(DataAndInstructionInput),
	.Done(Done),
	.Run(Run),
	.a(a),
	.b(b),
	.clock(clock),
	.resetn(resetn),
	.selectionMuxInput(selectionMuxInput),
	.writeInRegister(writeInRegister)
);
initial 
begin 
#1000000 $finish;
end 
// DataAndInstructionInput[ 8 ]
initial
begin
	DataAndInstructionInput[8] = 1'b1;
	DataAndInstructionInput[8] = #100000 1'b0;
	DataAndInstructionInput[8] = #100000 1'b1;
	DataAndInstructionInput[8] = #50000 1'b0;
	DataAndInstructionInput[8] = #100000 1'b1;
	DataAndInstructionInput[8] = #50000 1'b0;
	DataAndInstructionInput[8] = #150000 1'b1;
	DataAndInstructionInput[8] = #100000 1'b0;
	DataAndInstructionInput[8] = #50000 1'b1;
	DataAndInstructionInput[8] = #50000 1'b0;
	DataAndInstructionInput[8] = #100000 1'b1;
end 
// DataAndInstructionInput[ 7 ]
initial
begin
	DataAndInstructionInput[7] = 1'b1;
	DataAndInstructionInput[7] = #50000 1'b0;
	DataAndInstructionInput[7] = #50000 1'b1;
	DataAndInstructionInput[7] = #100000 1'b0;
	DataAndInstructionInput[7] = #50000 1'b1;
	DataAndInstructionInput[7] = #50000 1'b0;
	DataAndInstructionInput[7] = #50000 1'b1;
	DataAndInstructionInput[7] = #50000 1'b0;
	DataAndInstructionInput[7] = #150000 1'b1;
	DataAndInstructionInput[7] = #100000 1'b0;
	DataAndInstructionInput[7] = #50000 1'b1;
	DataAndInstructionInput[7] = #100000 1'b0;
end 
// DataAndInstructionInput[ 6 ]
initial
begin
	DataAndInstructionInput[6] = 1'b1;
	DataAndInstructionInput[6] = #50000 1'b0;
	DataAndInstructionInput[6] = #150000 1'b1;
	DataAndInstructionInput[6] = #150000 1'b0;
	DataAndInstructionInput[6] = #100000 1'b1;
	DataAndInstructionInput[6] = #100000 1'b0;
	DataAndInstructionInput[6] = #50000 1'b1;
	DataAndInstructionInput[6] = #50000 1'b0;
	DataAndInstructionInput[6] = #100000 1'b1;
	DataAndInstructionInput[6] = #50000 1'b0;
	DataAndInstructionInput[6] = #50000 1'b1;
end 
// DataAndInstructionInput[ 5 ]
initial
begin
	DataAndInstructionInput[5] = 1'b0;
	DataAndInstructionInput[5] = #50000 1'b1;
	DataAndInstructionInput[5] = #50000 1'b0;
	DataAndInstructionInput[5] = #150000 1'b1;
	DataAndInstructionInput[5] = #150000 1'b0;
	DataAndInstructionInput[5] = #200000 1'b1;
	DataAndInstructionInput[5] = #200000 1'b0;
end 
// DataAndInstructionInput[ 4 ]
initial
begin
	DataAndInstructionInput[4] = 1'b0;
	DataAndInstructionInput[4] = #100000 1'b1;
	DataAndInstructionInput[4] = #50000 1'b0;
	DataAndInstructionInput[4] = #100000 1'b1;
	DataAndInstructionInput[4] = #100000 1'b0;
	DataAndInstructionInput[4] = #50000 1'b1;
	DataAndInstructionInput[4] = #100000 1'b0;
	DataAndInstructionInput[4] = #50000 1'b1;
	DataAndInstructionInput[4] = #50000 1'b0;
	DataAndInstructionInput[4] = #100000 1'b1;
	DataAndInstructionInput[4] = #200000 1'b0;
	DataAndInstructionInput[4] = #50000 1'b1;
end 
// DataAndInstructionInput[ 3 ]
initial
begin
	DataAndInstructionInput[3] = 1'b1;
	DataAndInstructionInput[3] = #50000 1'b0;
	DataAndInstructionInput[3] = #50000 1'b1;
	DataAndInstructionInput[3] = #50000 1'b0;
	DataAndInstructionInput[3] = #100000 1'b1;
	DataAndInstructionInput[3] = #50000 1'b0;
	DataAndInstructionInput[3] = #50000 1'b1;
	DataAndInstructionInput[3] = #50000 1'b0;
	DataAndInstructionInput[3] = #50000 1'b1;
	DataAndInstructionInput[3] = #150000 1'b0;
	DataAndInstructionInput[3] = #50000 1'b1;
	DataAndInstructionInput[3] = #50000 1'b0;
	DataAndInstructionInput[3] = #50000 1'b1;
	DataAndInstructionInput[3] = #50000 1'b0;
	DataAndInstructionInput[3] = #50000 1'b1;
	DataAndInstructionInput[3] = #50000 1'b0;
end 
// DataAndInstructionInput[ 2 ]
initial
begin
	DataAndInstructionInput[2] = 1'b0;
	DataAndInstructionInput[2] = #50000 1'b1;
	DataAndInstructionInput[2] = #100000 1'b0;
	DataAndInstructionInput[2] = #50000 1'b1;
	DataAndInstructionInput[2] = #100000 1'b0;
	DataAndInstructionInput[2] = #50000 1'b1;
	DataAndInstructionInput[2] = #50000 1'b0;
	DataAndInstructionInput[2] = #50000 1'b1;
	DataAndInstructionInput[2] = #100000 1'b0;
	DataAndInstructionInput[2] = #50000 1'b1;
	DataAndInstructionInput[2] = #50000 1'b0;
	DataAndInstructionInput[2] = #50000 1'b1;
	DataAndInstructionInput[2] = #50000 1'b0;
	DataAndInstructionInput[2] = #200000 1'b1;
end 
// DataAndInstructionInput[ 1 ]
initial
begin
	DataAndInstructionInput[1] = 1'b0;
	DataAndInstructionInput[1] = #100000 1'b1;
	DataAndInstructionInput[1] = #50000 1'b0;
	DataAndInstructionInput[1] = #50000 1'b1;
	DataAndInstructionInput[1] = #100000 1'b0;
	DataAndInstructionInput[1] = #100000 1'b1;
	DataAndInstructionInput[1] = #50000 1'b0;
	DataAndInstructionInput[1] = #100000 1'b1;
	DataAndInstructionInput[1] = #200000 1'b0;
	DataAndInstructionInput[1] = #50000 1'b1;
	DataAndInstructionInput[1] = #50000 1'b0;
	DataAndInstructionInput[1] = #50000 1'b1;
end 
// DataAndInstructionInput[ 0 ]
initial
begin
	DataAndInstructionInput[0] = 1'b0;
	DataAndInstructionInput[0] = #250000 1'b1;
	DataAndInstructionInput[0] = #100000 1'b0;
	DataAndInstructionInput[0] = #50000 1'b1;
	DataAndInstructionInput[0] = #100000 1'b0;
	DataAndInstructionInput[0] = #150000 1'b1;
	DataAndInstructionInput[0] = #50000 1'b0;
	DataAndInstructionInput[0] = #200000 1'b1;
	DataAndInstructionInput[0] = #50000 1'b0;
end 

// Run
initial
begin
	Run = 1'b1;
	Run = #530000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
	a[8] = #50000 1'b1;
	a[8] = #100000 1'b0;
	a[8] = #100000 1'b1;
	a[8] = #100000 1'b0;
	a[8] = #100000 1'b1;
	a[8] = #150000 1'b0;
	a[8] = #100000 1'b1;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
	a[7] = #50000 1'b1;
	a[7] = #250000 1'b0;
	a[7] = #500000 1'b1;
	a[7] = #50000 1'b0;
	a[7] = #100000 1'b1;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b1;
	a[6] = #50000 1'b0;
	a[6] = #100000 1'b1;
	a[6] = #100000 1'b0;
	a[6] = #50000 1'b1;
	a[6] = #350000 1'b0;
	a[6] = #50000 1'b1;
	a[6] = #150000 1'b0;
	a[6] = #100000 1'b1;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b1;
	a[5] = #50000 1'b0;
	a[5] = #100000 1'b1;
	a[5] = #50000 1'b0;
	a[5] = #50000 1'b1;
	a[5] = #50000 1'b0;
	a[5] = #50000 1'b1;
	a[5] = #50000 1'b0;
	a[5] = #150000 1'b1;
	a[5] = #50000 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
	a[4] = #100000 1'b1;
	a[4] = #50000 1'b0;
	a[4] = #100000 1'b1;
	a[4] = #250000 1'b0;
	a[4] = #50000 1'b1;
	a[4] = #100000 1'b0;
	a[4] = #50000 1'b1;
	a[4] = #50000 1'b0;
	a[4] = #50000 1'b1;
	a[4] = #150000 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #100000 1'b1;
	a[3] = #100000 1'b0;
	a[3] = #100000 1'b1;
	a[3] = #100000 1'b0;
	a[3] = #150000 1'b1;
	a[3] = #200000 1'b0;
	a[3] = #50000 1'b1;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	a[2] = #200000 1'b1;
	a[2] = #50000 1'b0;
	a[2] = #50000 1'b1;
	a[2] = #250000 1'b0;
	a[2] = #50000 1'b1;
	a[2] = #50000 1'b0;
	a[2] = #200000 1'b1;
	a[2] = #100000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #100000 1'b1;
	a[1] = #50000 1'b0;
	a[1] = #50000 1'b1;
	a[1] = #50000 1'b0;
	a[1] = #100000 1'b1;
	a[1] = #50000 1'b0;
	a[1] = #50000 1'b1;
	a[1] = #50000 1'b0;
	a[1] = #300000 1'b1;
	a[1] = #50000 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b1;
	a[0] = #50000 1'b0;
	a[0] = #100000 1'b1;
	a[0] = #350000 1'b0;
	a[0] = #50000 1'b1;
	a[0] = #100000 1'b0;
	a[0] = #50000 1'b1;
	a[0] = #150000 1'b0;
	a[0] = #50000 1'b1;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b0;
	b[8] = #50000 1'b1;
	b[8] = #100000 1'b0;
	b[8] = #100000 1'b1;
	b[8] = #150000 1'b0;
	b[8] = #50000 1'b1;
	b[8] = #150000 1'b0;
	b[8] = #50000 1'b1;
	b[8] = #150000 1'b0;
	b[8] = #50000 1'b1;
	b[8] = #50000 1'b0;
	b[8] = #50000 1'b1;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
	b[7] = #50000 1'b1;
	b[7] = #50000 1'b0;
	b[7] = #150000 1'b1;
	b[7] = #50000 1'b0;
	b[7] = #100000 1'b1;
	b[7] = #50000 1'b0;
	b[7] = #50000 1'b1;
	b[7] = #50000 1'b0;
	b[7] = #100000 1'b1;
	b[7] = #50000 1'b0;
	b[7] = #50000 1'b1;
	b[7] = #50000 1'b0;
	b[7] = #100000 1'b1;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b1;
	b[6] = #50000 1'b0;
	b[6] = #100000 1'b1;
	b[6] = #50000 1'b0;
	b[6] = #200000 1'b1;
	b[6] = #50000 1'b0;
	b[6] = #50000 1'b1;
	b[6] = #150000 1'b0;
	b[6] = #100000 1'b1;
	b[6] = #50000 1'b0;
	b[6] = #150000 1'b1;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
	b[5] = #50000 1'b1;
	b[5] = #50000 1'b0;
	b[5] = #50000 1'b1;
	b[5] = #150000 1'b0;
	b[5] = #50000 1'b1;
	b[5] = #50000 1'b0;
	b[5] = #50000 1'b1;
	b[5] = #50000 1'b0;
	b[5] = #100000 1'b1;
	b[5] = #100000 1'b0;
	b[5] = #100000 1'b1;
	b[5] = #100000 1'b0;
	b[5] = #50000 1'b1;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
	b[4] = #50000 1'b1;
	b[4] = #50000 1'b0;
	b[4] = #50000 1'b1;
	b[4] = #250000 1'b0;
	b[4] = #50000 1'b1;
	b[4] = #150000 1'b0;
	b[4] = #50000 1'b1;
	b[4] = #50000 1'b0;
	b[4] = #50000 1'b1;
	b[4] = #200000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b1;
	b[3] = #50000 1'b0;
	b[3] = #100000 1'b1;
	b[3] = #50000 1'b0;
	b[3] = #50000 1'b1;
	b[3] = #50000 1'b0;
	b[3] = #200000 1'b1;
	b[3] = #100000 1'b0;
	b[3] = #150000 1'b1;
	b[3] = #100000 1'b0;
	b[3] = #100000 1'b1;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b1;
	b[2] = #50000 1'b0;
	b[2] = #50000 1'b1;
	b[2] = #50000 1'b0;
	b[2] = #50000 1'b1;
	b[2] = #50000 1'b0;
	b[2] = #200000 1'b1;
	b[2] = #200000 1'b0;
	b[2] = #150000 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b1;
	b[1] = #50000 1'b0;
	b[1] = #150000 1'b1;
	b[1] = #200000 1'b0;
	b[1] = #100000 1'b1;
	b[1] = #50000 1'b0;
	b[1] = #50000 1'b1;
	b[1] = #50000 1'b0;
	b[1] = #50000 1'b1;
	b[1] = #100000 1'b0;
	b[1] = #50000 1'b1;
	b[1] = #50000 1'b0;
	b[1] = #50000 1'b1;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
	b[0] = #50000 1'b1;
	b[0] = #50000 1'b0;
	b[0] = #100000 1'b1;
	b[0] = #50000 1'b0;
	b[0] = #100000 1'b1;
	b[0] = #100000 1'b0;
	b[0] = #50000 1'b1;
	b[0] = #50000 1'b0;
	b[0] = #100000 1'b1;
	b[0] = #100000 1'b0;
	b[0] = #50000 1'b1;
	b[0] = #50000 1'b0;
	b[0] = #50000 1'b1;
end 
// selectionMuxInput[ 2 ]
initial
begin
	selectionMuxInput[2] = 1'b0;
end 
// selectionMuxInput[ 1 ]
initial
begin
	selectionMuxInput[1] = 1'b0;
end 
// selectionMuxInput[ 0 ]
initial
begin
	selectionMuxInput[0] = 1'b0;
end 
// writeInRegister[ 2 ]
initial
begin
	writeInRegister[2] = 1'b0;
end 
// writeInRegister[ 1 ]
initial
begin
	writeInRegister[1] = 1'b0;
end 
// writeInRegister[ 0 ]
initial
begin
	writeInRegister[0] = 1'b0;
end 

// resetn
initial
begin
	resetn = 1'b1;
	resetn = #490000 1'b0;
end 
endmodule

